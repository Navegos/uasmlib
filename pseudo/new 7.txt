





		__align_size_t
		_m128icvtelts128epi64jmptable isize_t offset _m128icvtelts128epi64_0, offset _m128icvtelts128epi64_1
		

_uXm_mm_cvteltsi128_epi16 proc __veccall (dword) frame ;Inxmm_A:xmmword, _Imm8:dword

		;.if(rparam2 > 3)
		;	ret
		;.else

		ifndef __X64__
			movzx			eax,	byte ptr [rparam2]
			;mov				rbx,	dword ptr [rbx+rparam2*4]
			jmp		dword ptr [_m128icvtelts128epi64jmptable+eax*4]
		else
			;movzx			rax,	byte ptr [rparam2]
			lea				rbx,	qword ptr [_m128icvtelts128epi64jmptable]
			mov				rbx,	qword ptr [rbx+rparam2*8]
			jmp				rbx
		endif
		
		_m128icvtelts128epi64_0 label size_t			
			pxor			xmm1,			xmm1
			punpckldq		xmm0,			xmm1
			punpcklqdq		xmm0,			xmm1
			movd			dreturn,			xmm0
			ret
		_m128icvtelts128epi64_1 label size_t
			pxor			xmm1,			xmm1
			pshufd			xmm0,			xmm0,			_uXm_mm_shuffler4(2,3,2,3)
			punpckldq		xmm0,			xmm1
			punpcklqdq		xmm0,			xmm1
			movd			dreturn,			xmm0
			ret
		;.endif

_uXm_mm_cvteltsi128_epi16 endp
